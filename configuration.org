#+TITLE: Emacs Configuration
#+AUTHOR: Tejas Kale
#+EMAIL: kaletejas2006@gmail.com
#+OPTIONS: toc:nil num:nil

* Package Management

#+BEGIN_SRC emacs-lisp
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
    (add-to-list 'package-archives (cons "melpa" url) t))
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
#+END_SRC

Auto-install required packages.

#+BEGIN_SRC emacs-lisp
  (defvar req-packages '(auto-complete
                         ein
                         elpy
                         exec-path-from-shell
                         flycheck
                         magit
                         monokai-theme
                         nlinum
                         projectile
                         use-package))

    (defun uninstalled-packages (packages)
      (delq nil
            (mapcar (lambda (p)
                      (if (package-installed-p p nil) nil p))
                    packages)))

    (let ((need-to-install
           (uninstalled-packages req-packages)))
      (when need-to-install
        (progn
          (package-refresh-contents)
          (dolist (p need-to-install)
            (package-install p)))))
#+END_SRC

* Setup Defaults

Use [[own_defaults.el][own_defaults.el]] to setup defaults

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/scripts/own-defaults.el")
  (own-defaults/use-all-settings)
  (own-defaults/use-all-keybindings)
#+END_SRC

* Device Settings

Load =org-agenda-files=.

#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs.d/scripts/device-settings.el")
#+END_SRC

* General Settings

Configuration of =ivy-swiper-counsel= triumvarate.

#+BEGIN_SRC emacs-lisp
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "<f6>") 'ivy-resume)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "<f1> f") 'counsel-describe-function)
  (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
#+END_SRC

* Configure =use-package=
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-11-23 Thu 12:52
  :ARCHIVE_FILE: f:/code/personal/dotfiles/emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

Install (if required) and activate 'use-package'.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)

  (require 'use-package)
#+END_SRC

Always compile packages and use the newest available version.

#+BEGIN_SRC emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

* UI Preferences
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-11-23 Thu 12:52
  :ARCHIVE_FILE: f:/code/personal/dotfiles/emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

** Tweak Window Chrome

Remove the menu and scroll bar to free up space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

Add project name to title frame.

** Use Lambdas

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Cursor

I like a bar instead of a box.

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
  (set-cursor-color "#ffffff")
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme)

  (defun tk/apply-monokai-theme ()
    (load-theme 'monokai t))
#+END_SRC

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent frame is themed appropriately.

#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (tk/apply-monokai-theme)))
    (tk/apply-monokai-theme))
#+END_SRC

** Fonts

Hack is the current favourite with size 12.

#+BEGIN_SRC emacs-lisp
  (setq tk/default-font "Hack")
    (setq tk/default-font-size 12)
    (setq tk/current-font-size tk/default-font-size)

    (setq tk/font-change-increment 1.1)

    (defun tk/font-code ()
      "Return a string representing the current font (like 'Hack-14')"
      (concat tk/default-font "-" (number-to-string tk/current-font-size)))

    (defun tk/set-font-size ()
      "Set the font to `tk/default-font' at `tk/current-font-size'.
    Set that for the current frame, and also make it the default for
    other, future frames."
      (let ((font-code (tk/font-code)))
        (add-to-list 'default-frame-alist (cons 'font font-code))
        (set-frame-font font-code)))

    (defun tk/reset-font-size ()
      "Change font size back to `tk/default-font-size'."
      (interactive)
      (setq tk/current-font-size tk/default-font-size)
      (tk/set-font-size))

    (defun tk/increase-font-size ()
      "Increase current font size by a factor of `tk/font-change-increment'."
      (interactive)
      (setq tk/current-font-size
            (ceiling (* tk/current-font-size tk/font-change-increment)))
      (tk/set-font-size))

    (defun tk/decrease-font-size ()
      "Decrease current font size by a factor of `tk/font-change-increment', down to a minimum size of 1."
      (interactive)
      (setq tk/current-font-size
            (max 1
                 (floor (/ tk/current-font-size tk/font-change-increment))))
      (tk/set-font-size))

    (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
    (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
    (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
    (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
    (define-key global-map (kbd "C--") 'hrs/decrease-font-size)

    (tk/reset-font-size)
#+END_SRC

** Line Numbers

Show line numbers.

#+BEGIN_SRC emacs-lisp
  ;; Preset `nlinum-format' for minimum width.
  (defun my-nlinum-mode-hook ()
    (when nlinum-mode
      (setq-local nlinum-format
                  (concat "%" (number-to-string
                               ;; Guesstimate number of buffer lines.
                               (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
                          "d"))))
  (add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)
#+END_SRC

* Programming Customisations
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-11-23 Thu 12:52
  :ARCHIVE_FILE: f:/code/personal/dotfiles/emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:

** General

Reduce the default indentation.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Bring the compilation output in focus.

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output t)
#+END_SRC

** =auto-complete=

I prefer to see a listing for auto-complete.

#+BEGIN_SRC emacs-lisp
  (require 'auto-complete-config)
  (ac-config-default)

  (setq ac-show-menu-immediately-on-auto-complete t)
#+END_SRC

** =elpy=

Use the IPython interpreter by default.

#+BEGIN_SRC emacs-lisp
  (require 'elpy)
  (elpy-enable)
  (elpy-use-ipython)
#+END_SRC

** =flycheck=

#+BEGIN_SRC emacs-lisp
  (require 'flycheck)
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+END_SRC

** =magit=

- Bring up the status menu with =C-x g=.
- Remove =magit='s default behaviour of requesting a confirmation before each push.
- Set maximum commit summary output to 50 lines?
- Enable spellcheck when writing commit messages.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)
  (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
#+END_SRC

** =org-bullets=

#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1)))
#+END_SRC

** =projectile=

Initialise the package.

#+BEGIN_SRC emacs-lisp
  (require 'projectile)
  (projectile-global-mode)
#+END_SRC
** =python=

#+BEGIN_SRC emacs-lisp
  (setq python-indent 4)
#+END_SRC

** =realgud=

Load the package by default.

#+BEGIN_SRC emacs-lisp
  (require 'realgud)
#+END_SRC
** =which-key=

#+BEGIN_SRC emacs-lisp
  (require 'which-key)
  (which-key-mode)
#+END_SRC

* =org-mode= Customisations

Automatically indent text.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

Wrap lines around the edge of buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'(lambda ()
                               (visual-line-mode)
                               (org-indent-mode)))
#+END_SRC

Open agenda in current buffer.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'current-window)
#+END_SRC

Set keybindings

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-log-done t)
#+END_SRC

Custom task sequence and colour-coding.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t!)" "NEXT(n!)" "|" "DONE(d!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "SOMEDAY(s!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))

  (setq org-use-fast-todo-selection t)

  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

Do not show time grid.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-use-time-grid nil)
#+END_SRC

Set location of Reveal.js

#+BEGIN_SRC emacs-lisp
  (require 'ox-reveal)
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
#+END_SRC

Load Python for execution in blocks.

#+BEGIN_SRC emacs-lisp
  (require 'ob-python)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+END_SRC
