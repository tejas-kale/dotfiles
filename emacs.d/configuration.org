#+TITLE: Emacs Configuration
#+AUTHOR: Tejas Kale
#+EMAIL: kaletejas2006@gmail.com
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything


* Configuration
** Startup

#+BEGIN_SRC emacs-lisp
  ;; Set the load paths which can be overridden later.
  (require 'package)
  (package-initialize)
  (setq device-file "~/.emacs.d/scripts/device-settings.el")
  (load device-file)
#+END_SRC

** Personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Tejas Kale"
        user-mail-address "kaletejas2006@gmail.com")

#+END_SRC

** Emacs initialisation
*** Add package sources

#+BEGIN_SRC emacs-lisp
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (url (concat (if no-ssl "http" "https") "://melpa.org/packages/")))
    (add-to-list 'package-archives (cons "melpa" url) t))
  (when (< emacs-major-version 24)
    ;; For important compatibility libraries like cl-lib
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
  (package-initialize)
#+END_SRC

After adding the above code block for the first time, use =M-x package-refresh-contents= to reload the list of packages.

*** Add elisp directory and other files

Add path to custom elisp files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/elisp")
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
  (use-package auto-compile
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
#+END_SRC

*** Add environment variables to Emacs

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :init
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+END_SRC

** General configuration
*** Libraries

#+BEGIN_SRC emacs-lisp
  (use-package dash)
#+END_SRC

*** Backups

Avoid backup files (beginning with =#= or ending with =~=) from cluttering the working directories.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Save everything!

#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

*** History

#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC

*** Window configuration

Split the window into vertical buffers.

#+BEGIN_SRC emacs-lisp
(split-window-right)
#+END_SRC

Refresh buffer when a file is modified externally.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Set default line length to 80 characters.

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 80)
#+END_SRC

Remove the startup message and clear the scratch buffer.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
#+END_SRC

Remove the tool bar, menu bar, and scrollbar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(toggle-scroll-bar -1)
#+END_SRC

Show time in mode line.

#+BEGIN_SRC emacs-lisp
(display-time-mode 1)
#+END_SRC

=winner-mode= lets you use =C-c <left>= and =C-c <right>= to switch between window configurations. This is handy when something has popped up a buffer that you want to look at briefly before returning to whatever you were working on. When you're done, press =C-c <left>=.

#+BEGIN_SRC emacs-lisp
(use-package winner
  :defer t)
#+END_SRC

*** Text configuration

End sentences with a single space.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

Delete any trailing whitespace before saving a buffer.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Delete selected text when new text is typed after selecting it.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

Turn on syntax highlighting wherever possible.

#+BEGIN_SRC emacs-lisp
(global-font-lock-mode t)
#+END_SRC

Highlight matching parenthesis.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
(setq show-paren-delay 0.0)
#+END_SRC

*** Helm - interactive completion

#+BEGIN_SRC emacs-lisp
(use-package helm
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (helm-mode))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ("C-x C-b" . helm-mini)
         ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings)))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally
#+END_SRC

*** Encryption
Use the packaged EasyPG encryption.

The default value of =epa-pinentry-mode= is =nil= which leads to failure in decrypting files. Changing it to ='loopback= makes Emacs ask for passphrase in the minibuffer.

#+BEGIN_SRC emacs-lisp
  (use-package epa-file)
  (custom-set-variables '(epg-gpg-program "/usr/local/bin/gpg"))
  (setq epa-pinentry-mode 'loopback)
  (epa-file-enable)
#+END_SRC

Use the =org-password-manager= package to retrieve usernames and passwords.

#+BEGIN_SRC emacs-lisp
  (use-package org-password-manager
    :init
    (add-hook 'org-mode-hook 'org-password-manager-key-bindings))
#+END_SRC

*** Mode line format
Show a compact mode line.

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line)
#+END_SRC

*** Lazy yes/no

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** Undo tree mode

Use =C-x u= (=undo-tree-visualize=) to visually walk through the changes.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))
#+END_SRC

*** UTF-8

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

*** Garbage collector
Allow =20 MB= before garbage collector is called.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC

*** Key bindings
Comment/Uncomment a region.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-;")
		  'own-defaults/comment-or-uncomment-region-or-line)
#+END_SRC

Bind =<home>= and =<end>= keys to move the beginning and end of line respectively.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<home>") 'move-beginning-of-line)
(global-set-key (kbd "<end>") 'move-end-of-line)
#+END_SRC

Bind =C-+= and =C--= to increase and decrease text size.

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-)") 'own-defaults/reset-text-size)
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C-=") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)
(define-key global-map (kbd "C-_") 'text-scale-decrease)
#+END_SRC

*** Executable scripts
Files starting with =#!= are made executable.

#+BEGIN_SRC emacs-lisp
(add-hook 'after-save-hook
	    'executable-make-buffer-file-executable-if-script-p)
#+END_SRC

*** Confirm closing Emacs
Seek confirmation before closing Emacs

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

*** Cursor
I like a bar instead of a box.

#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
  (set-cursor-color "#ffffff")
#+END_SRC

*** Fonts
Hack is the current favourite with size 12.

#+BEGIN_SRC emacs-lisp
  (setq tk/default-font "Hack")
    (setq tk/default-font-size 12)
    (setq tk/current-font-size tk/default-font-size)

    (setq tk/font-change-increment 1.1)

    (defun tk/font-code ()
      "Return a string representing the current font (like 'Hack-14')"
      (concat tk/default-font "-" (number-to-string tk/current-font-size)))

    (defun tk/set-font-size ()
      "Set the font to `tk/default-font' at `tk/current-font-size'.
    Set that for the current frame, and also make it the default for
    other, future frames."
      (let ((font-code (tk/font-code)))
        (add-to-list 'default-frame-alist (cons 'font font-code))
        (set-frame-font font-code)))

    (defun tk/reset-font-size ()
      "Change font size back to `tk/default-font-size'."
      (interactive)
      (setq tk/current-font-size tk/default-font-size)
      (tk/set-font-size))

    (defun tk/increase-font-size ()
      "Increase current font size by a factor of `tk/font-change-increment'."
      (interactive)
      (setq tk/current-font-size
            (ceiling (* tk/current-font-size tk/font-change-increment)))
      (tk/set-font-size))

    (defun tk/decrease-font-size ()
      "Decrease current font size by a factor of `tk/font-change-increment', down to a minimum size of 1."
      (interactive)
      (setq tk/current-font-size
            (max 1
                 (floor (/ tk/current-font-size tk/font-change-increment))))
      (tk/set-font-size))

    (define-key global-map (kbd "C-)") 'hrs/reset-font-size)
    (define-key global-map (kbd "C-+") 'hrs/increase-font-size)
    (define-key global-map (kbd "C-=") 'hrs/increase-font-size)
    (define-key global-map (kbd "C-_") 'hrs/decrease-font-size)
    (define-key global-map (kbd "C--") 'hrs/decrease-font-size)

    (tk/reset-font-size)
#+END_SRC

*** Show key suggestions
Use =which-key= to suggest key bindings from an incomplete command

#+BEGIN_SRC emacs-lisp
(use-package which-key)
(which-key-mode)
#+END_SRC

*** Theme
Load the Monokai theme.

#+BEGIN_SRC emacs-lisp
(use-package monokai-theme
  :init
  (load-theme 'monokai t))
#+END_SRC

*** Pocket
Pocket extension to read articles in Emacs.

#+BEGIN_SRC emacs-lisp
;  (use-package pocket-reader)
#+END_SRC

*** Shell
In Windows, I prefer to use the Babun (Cygwin) shell.

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
          (setenv "PATH" (concat "c:/Users/tejas.k/.babun/cygwin/bin;" (getenv "PATH")))
          (setq exec-path (cons "c:/Users/tejas.k/.babun/cygwin/bin/" exec-path))

          (use-package cygwin-mount)
          (cygwin-mount-activate)

          (add-hook 'comint-output-filter-functions
                    'shell-strip-ctrl-m nil t)
          (add-hook 'comint-output-filter-functions
                    'comint-watch-for-password-prompt nil t)
          (setq explicit-shell-file-name "mintty.exe --login -i")
          (setq shell-file-name explicit-shell-file-name))

  (add-hook 'shell-mode-hook 'n-shell-mode-hook)
  (defun n-shell-mode-hook ()
    (local-set-key '[up] 'comint-previous-input)
    (local-set-key '[down] 'comint-next-input)
    (local-set-key '[(shift tab)] 'comint-next-matching-input-from-input))
#+END_SRC
** Navigation
*** Helm-swoop - quickly find lines

Better/Faster way to find things.

#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
 :bind
 (("C-S-s" . helm-swoop)
  ("M-i" . helm-swoop)
  ("M-s s" . helm-swoop)
  ("M-s M-s" . helm-swoop)
  ("M-I" . helm-swoop-back-to-last-point)
  ("C-c M-i" . helm-multi-swoop)
  ("C-x M-i" . helm-multi-swoop-all)
  )
 :config
 (progn
   (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
   (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop))
)
#+END_SRC

*** Windmove - switching between windows

Windmove provides a more intuitive way than =C-x o= (=other-window=) to move between windows. But it doesn't work well with =org-mode= hence the need to use different keybindings.

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :bind
  (("<f2> l" . windmove-right)
   ("<f2> h" . windmove-left)
   ("<f2> k" . windmove-up)
   ("<f2> j" . windmove-down)
   ))
#+END_SRC

*** Evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (evil-mode 1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package powerline-evil
    :init
    (powerline-evil-vim-color-theme))
#+END_SRC

** Writing
*** Line breaks

=visual-line-mode= only seems to break the text into multiple lines.

#+BEGIN_SRC emacs-lisp
(remove-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

** Org-mode
*** Lists
Use pretty symbols.

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

Also, use bullets from the =org-bullets= package.

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :init
  (add-hook 'org-mode-hook (lambda() (org-bullets-mode 1))))
#+END_SRC

*** GTD

*** TBS
Automatically indent text.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

Wrap lines around the edge of buffer.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'(lambda ()
                               (visual-line-mode)
                               (org-indent-mode)))
#+END_SRC

Open agenda in current buffer.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'current-window)
#+END_SRC

Set keybindings

#+BEGIN_SRC emacs-lisp
  (require 'org)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (setq org-log-done t)
#+END_SRC

Custom task sequence and colour-coding.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t!)" "NEXT(n!)" "|" "DONE(d!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "SOMEDAY(s!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "pink" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))

  (setq org-use-fast-todo-selection t)

  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

Custom agenda

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("o" "At the office" tags-todo "@office"
           ((org-agenda-overriding-header "Office")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
          ("y" "Study" tags-todo "@study"
           ((org-agenda-overriding-header "Study")
            (org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))))

  (defun my-org-agenda-skip-all-siblings-but-first ()
    "Skip all but the first non-done entry."
    (let (should-skip-entry)
      (unless (org-current-is-todo)
        (setq should-skip-entry t))
      (save-excursion
        (while (and (not should-skip-entry) (org-goto-sibling t))
          (when (org-current-is-todo)
            (setq should-skip-entry t))))
      (when should-skip-entry
        (or (outline-next-heading)
            (goto-char (point-max))))))

  (defun org-current-is-todo ()
    (string= "TODO" (org-get-todo-state)))
#+END_SRC

Do not show time grid.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-use-time-grid nil)
#+END_SRC

Set location of Reveal.js

#+BEGIN_SRC emacs-lisp
  (require 'ox-reveal)
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
#+END_SRC

Load Python for execution in blocks.

#+BEGIN_SRC emacs-lisp
  (require 'ob-python)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+END_SRC

** Coding
  :PROPERTIES:
  :ARCHIVE_TIME: 2017-11-23 Thu 12:52
  :ARCHIVE_FILE: f:/code/personal/dotfiles/emacs.d/configuration.org
  :ARCHIVE_CATEGORY: configuration
  :END:
*** General
Reduce the default indentation.

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

Bring the compilation output in focus.

#+BEGIN_SRC emacs-lisp
(setq compilation-scroll-output t)
#+END_SRC

*** Auto-complete
I prefer to see a listing for auto-complete.

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete-config
    :config
    (ac-config-default))

  (setq ac-show-menu-immediately-on-auto-complete t)
#+END_SRC

*** Python
Use the IPython interpreter by default.

#+BEGIN_SRC emacs-lisp
(use-package elpy)
(elpy-enable)
(elpy-use-ipython)
#+END_SRC

*** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init
  (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
*** Projectile
Enable Projectile for project management and =helm-projectile= to get the goodies of =helm= with it.

#+BEGIN_SRC emacs-lisp
  (use-package projectile)
  (use-package helm-projectile)

  (projectile-global-mode)
  (setq projectile-indexing-method 'alien)

  (helm-projectile-on)
  (setq projectile-completion-system 'helm)
  (setq projectile-switch-project-action 'helm-projectile-find-file)
  (setq projectile-switch-project-action 'helm-projectile)
#+END_SRC
